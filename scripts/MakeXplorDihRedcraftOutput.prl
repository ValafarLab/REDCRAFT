#!/usr/bin/perl 

$defaultDeltaPhi = 5;
$defaultDeltaPsi = 5;
	  
sub PrintXplorAngles {
	($fout, $phi, $psi, $deltaPhi, $deltaPsi, $res, $comment) = @_;
	$p_res = $res - 1;
	$n_res = $res + 1;

	print $fout "! (phi) $comment\n";
	print $fout "assign ( resid  $p_res and name C) (resid $res and name N)\n";
	print $fout "       ( resid  $res and name CA) (resid $res and name C) ";
	print $fout "1 $phi $deltaPhi 2\n";

	print $fout "! (psi) $comment\n";
	print $fout "assign ( resid  $res and name N) (resid $res and name CA)\n";
	print $fout "       ( resid  $res and name C) (resid $n_res and name CA) ";
	print $fout "1 $psi $deltaPsi 2\n";
}

$numarg = $#ARGV;

if($numarg != 4) {
  print "Usage: $0 <Start> <End> <output file> <Redcraft RDC file> <REDCRAFT output file>\n";
  exit(0);
}

$start = $ARGV[0];
$end = $ARGV[1];

open(fout, ">$ARGV[2]"), or die "Error opening output file\n";
open(finRDC, "<$ARGV[3]"), or die "Error opening $ARGV[3]\n";
open(finAng, "<$ARGV[4]"), or die "Error opening $ARGV[4]\n";

if(($end-$start) < 1) {
	print "Need to have at least two peptide planes.\n";
	exit(0);
}

$anglesLine = <finAng>;
chomp($anglesLine);
@angles = split(" ", $anglesLine);
$len = @angles;
@angles = @angles[0..$len - 2];
$angleInd = 0;

for($i = 1; $i < $start; $i++) {
   $AAtype = <finRDC>;
   $CN = <finRDC>;
   $NH = <finRDC>;
   $CH = <finRDC>;
   $CAHA = <finRDC>;
   $HAH = <finRDC>;
   $HaH = <finRDC>;
   $angleInd = $angleInd + 2;
}

for($i = $start ; $i <= $end; $i++) {
   $AAtype = <finRDC>;
   $CN = <finRDC>;
   $NH = <finRDC>;
   $CH = <finRDC>;
   $CAHA = <finRDC>;
   $HAH = <finRDC>;
   $HaH = <finRDC>;
      
   $phi = $angles[$angleInd];
   $psi = $angles[$angleInd + 1];    
   $deltaPhi = $defaultDeltaPhi;
   $deltaPsi = $defaultDeltaPsi;
   
   $angleInd = $angleInd + 2;

   chomp($AAtype); 
   @list = split(" ", $AAtype);
   $res = @list[1];
   $aaComment = "";
   $len = @list;
   if ($len > 2) {	
      $aaComment = join(" ", @list[2 .. $len - 1]);
   }   
   
   PrintXplorAngles(fout, $phi, $psi, $deltaPhi, $deltaPsi, $i, $aaComment);

}
close(foutDih);
close(finRDC);
close(finAng);
